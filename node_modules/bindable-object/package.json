{
  "name": "bindable-object",
  "version": "0.0.6",
  "description": "Two-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.",
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mojo-js/bindable-object.js.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mojo-js/bindable-object.js/issues"
  },
  "homepage": "https://github.com/mojo-js/bindable-object.js",
  "dependencies": {
    "fast-event-emitter": "0.0.x",
    "protoclass": "0.0.6",
    "toarray": "0.0.1"
  },
  "devDependencies": {
    "expect.js": "^0.3.1",
    "mocha": "^2.0.1"
  },
  "readme": "[![Build Status](https://travis-ci.org/mojo-js/bindable-object.js.svg?branch=master)](https://travis-ci.org/mojo-js/bindable-object.js)\n\nFast data-binding library \n\nTwo-way data binding means linking properties of two separate objects - when one changes, the other will automatically update with that change.  It enables much easier interactions between data models and UIs, among other uses outside of MVC.\n\n### Example\n\n```javascript\nvar BindableObject = require(\"bindable-object\");\n\nvar person = new BindableObject({\n  name: \"craig\",\n  last: \"condon\",\n  location: {\n    city: \"San Francisco\"\n  }\n});\n\nperson.bind(\"location.zip\", function(value) {\n  // 94102\n}).now();\n\n//triggers the binding\nperson.set(\"location.zip\", \"94102\");\n\n//bind location.zip to another property in the model, and do it only once\nperson.bind(\"location.zip\", function (zip) {\n  console.log(zip); // 94102\n}).now();\n\nperson.bind(\"name, last\", function (fn, ln) {\n  console.log(fn, ln); // craig condon\n}).now();\n```\n\n### Installation\n\n```\nnpm install bindable-object --save-exact\n```\n\n#### BindableObject(properties)\n\ncreates a new bindable object\n\n#### value get(property)\n\nReturns a property on the bindable object\n\n```javascript\nvar obj = new BindableObject({ city: { name: \"SF\" } });\nconsole.log(obj.get(\"city\"));      // { name: \"SF\" }\nconsole.log(\"no getter\", obj.city); // { name: \"SF\" }\nconsole.log(obj.get(\"city.name\")); // SF\nconsole.log(\"no getter\", obj.city.name); // { name: \"SF\" }\n```\n\n#### set(property, value)\n\nSets a value to the bindable object\n\n```javascript\nvar obj = new BindableObject();\nobj.set(\"city.name\", \"SF\");\nconsole.log(obj.get(\"city.name\")); // SF\n```\n\n#### setProperties(properties)\n\nsets multiple properties on the bindable object\n\n```javascript\nvar person = new BindableObject();\nperson.setProperties({\n  firstName: \"Jon\",\n  lastName: \"Doe\"\n});\nconsole.log(person.get(\"firstName\"), person.get(\"lastName\")); // Jon Doe\n```\n\n#### has(property)\n\nReturns true if the bindable object has a given property\n\n```javascript\nvar obj = new BindableObject({ count: 0, male: false, name: \"craig\" });\n\nconsole.log(obj.has(\"count\")); // true\nconsole.log(obj.has(\"male\")); // true\nconsole.log(obj.has(\"name\")); // true\nconsole.log(obj.has(\"city\")); // false\n```\n\n#### listener on(event, callback)\n\nadds a new listener to the bindable object\n\n#### emit(event[,args...])\n\nemits a new event\n\n```javascript\nvar person = new BindableObject();\n\nperson.on(\"blarg\", function (arg1, arg2) {\n  console.log(arg1, arg2);\n});\n\nperson.emit(\"blarg\", \"something!\", \"something again!!\");\n```\n\n#### once(event, callback)\n\nlistens to one event, then disposes the listener.\n\n```javascript\nvar person = new BindableObject();\n\nperson.once(\"blarg\", function (arg1, arg2) {\n  console.log(arg1, arg2);\n});\n\nperson.emit(\"blarg\", \"something!\", \"something again!!\");\nperson.emit(\"blarg\", \"never caught again!\");\n```\n\n#### removeAllListeners([type])\n\nreturns all the listeners on the bindable object\n\n#### binding bind(from, options)\n\n`options` - the options for the binding\n  - `to` - the property to bind to. Can be a `string`, `array`, or `function`\n  - `target` - the target bindable object. Default is self\n  - `max` - max number of times to run the data-binding\n  - `when` - tests the data-bound value before setting\n  - `map` - transforms the data-bound value\n  - `bothWays` - makes the data-binding bi-directional.\n\n\n```javascript\nvar obj = new BindableObject({ name: \"craig\" });\n\n// bind the name, but transform it to upper case\nobj.bind(\"name\", { to: \"name2\", map: function (name) {\n  return String(name).toUpperCase();\n}}).now();\n\nconsole.log(obj.get(\"name\"), obj.get(\"name2\"));\nobj.set(\"name\", \"jeff\");\nconsole.log(obj.get(\"name\"), obj.get(\"name2\"));\n```\n\n\n#### binding.now()\n\nExecutes a binding now\n\n```javascript\nvar bindable = require(\"bindable\");\nvar person = new BindableObject({ name: \"jeff\" });\nperson.bind(\"name\", function (name, oldName) {\n  console.log(\"binding called, name is: \", name);\n}).now();\n\n// above is triggered\nperson.set(\"name\", \"joe\");\n```\n\n\n#### binding.dispose()\n\nDisposes a binding\n\n```javascript\nvar bindable = require(\"bindable\");\nvar person = new BindableObject({ name: \"jeff\" });\n\nvar binding = person.bind(\"name\", function (name, oldName) {\n  console.log(\"binding called, name is: \", name);\n}).now();\n\nbinding.dispose();\n\nperson.set(\"name\", \"jake\"); // binding not triggered\n```\n\n\n#### Events\n\nBindable objects emit a few events:\n\n- `change:*` - emitted when a property changes on the bindable object. E.g: `change:location.zip`.\n- `change` - emitted when any property changes on the bindable object\n- `watching` - emitted when a property is being watched\n- `dispose` - emitted when `dispose()` is called on a bindable object\n\n```javascript\nvar person = new BindableObject({ name: \"jeff\" });\n\nperson.on(\"change:name\", function (newName) {\n  console.log(\"the name changed to\", newName);\n});\n\nperson.on(\"change\", function (key, value) {\n  console.log(\"some value has changed: \", key, \"=\", value);\n});\n\nperson.on(\"watching\", function (property) {\n  console.log(\"watching \", property);\n});\n\nperson.on(\"dispose\", function () {\n  console.log(\"the object was disposed\");\n});\n\nperson.set(\"name\", \"james\");\nperson.set(\"city\", \"sf\");\nperson.bind(\"name\", function(){}); // trigger watching\nperson.dispose();\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "482c45f39b2c20f8733b9020f925e7e688f5b1ad",
  "_id": "bindable-object@0.0.6",
  "_shasum": "add279208eacc83432daf00201939d3db8c36492",
  "_from": "bindable-object@*"
}
